<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class QueryBuilderTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::delete("delete from categories");
    }

    /**
     * Query Builder
     * ● Selain menggunakan Raw Sql, Laravel Database juga memiliki fitur bernama Query Builder
     * ● Fitur ini sangat mempermudah kita ketika ingin membuat perintah ke database dibandingkan
     *   melakukannya secara manual menggunakan Raw SQL
     * ● Query Builder direpresentasikan dengan class Builder
     * ● https://laravel.com/api/10.x/Illuminate/Database/Query/Builder.html
     * ● Untuk membuat Query Builder, kita bisa gunakan function DB::table(nama)
     *
     * Query Builder Insert
     * ● Untuk melakukan Insert menggunakan Query Builder, kita bisa menggunakan method dengan
     *   prefix insert dengan parameter associative array dimana key nya adalah kolom, dan value nya
     *   adalah nilai yang akan disimpan di database
     * ● insert() untuk memasukkan data ke database, throw exception jika terjadi error misal duplicate
     *   primary key
     * ● insertGetId() untuk memasukkan data ke database, dan mengembalikan primary key yang diset
     *   secara auto generate, cocok untuk tabel dengan id auto increment
     * ● insertOrIgnore() untuk memasukkan data ke database, dan jika terjadi error, maka akan di ignore
     */

    public function testQueryBuilderInsert(){

        // DB::table("nama_table")->insert(["key" => value]) // key adalah nama column dan value ada isi data record
        DB::table("categories")->insert([
            "id" => "SANDAL",
            "name" => "Consina",
            "description" => "Sandal Gunung",
        ]);
        DB::table("categories")->insert([
            "id" => "JAKET",
            "name" => "Consina",
            "description" => "Jaket Gunung",
        ]);

        $result = DB::select("select count(id) as total from categories");

        self::assertEquals(2, $result[0]->total);

        var_dump($result);

    }

}
