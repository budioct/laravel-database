<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class QueryBuilderTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::delete("delete from categories");
    }

    /**
     * Query Builder
     * ● Selain menggunakan Raw Sql, Laravel Database juga memiliki fitur bernama Query Builder
     * ● Fitur ini sangat mempermudah kita ketika ingin membuat perintah ke database dibandingkan
     *   melakukannya secara manual menggunakan Raw SQL
     * ● Query Builder direpresentasikan dengan class Builder
     * ● https://laravel.com/api/10.x/Illuminate/Database/Query/Builder.html
     * ● Untuk membuat Query Builder, kita bisa gunakan function DB::table(nama)
     *
     * Query Builder Insert
     * ● Untuk melakukan Insert menggunakan Query Builder, kita bisa menggunakan method dengan
     *   prefix insert dengan parameter associative array dimana key nya adalah kolom, dan value nya
     *   adalah nilai yang akan disimpan di database
     * ● insert() untuk memasukkan data ke database, throw exception jika terjadi error misal duplicate
     *   primary key
     * ● insertGetId() untuk memasukkan data ke database, dan mengembalikan primary key yang diset
     *   secara auto generate, cocok untuk tabel dengan id auto increment
     * ● insertOrIgnore() untuk memasukkan data ke database, dan jika terjadi error, maka akan di ignore
     */

    public function testQueryBuilderInsert(){

        // DB::table("nama_table")->insert(["key" => value]) // key adalah nama column dan value ada isi data record
        DB::table("categories")->insert([
            "id" => "SANDAL",
            "name" => "Consina",
            "description" => "Sandal Gunung",
        ]);
        DB::table("categories")->insert([
            "id" => "JAKET",
            "name" => "Consina",
            "description" => "Jaket Gunung",
        ]);

        $result = DB::select("select count(id) as total from categories");

        self::assertEquals(2, $result[0]->total);

        var_dump($result);

    }

    /**
     * Query Builder Select
     * ● Ada beberapa function di Query Builder yang bisa kita gunakan untuk melakukan perintah select
     * ● select(columns), untuk mengubah select kolom, dimana defaultnya adalah semua kolom
     * ● Setelah itu, untuk mengeksekusi SQL dan menyimpannya di Collection secara langsung, kita bisa
     *   menggunakan beberapa method
     * ● get(columns), untuk mengambil seluruh data, defaultnya semua kolom diambil
     * ● first(columns), untuk mengambil data pertama, defaultnya semua kolom diambil
     * ● pluck(column), untuk mengambil salah satu kolom saja
     * ● Hasil dari Query Builder Select adalah Laravel Collection
     */

    public function testQueryBuilderSelect(){

        $this->testQueryBuilderInsert(); //insert data

        // DB::table("nama_table")->select([column_table])->get();
        // untuk eksekusi query ada beberapa method get() ambil semua, first() ambil data pertama,   pluck() ambil beberpa data
        $collection = DB::table("categories")
            ->select(["id", "name"])
            ->get();

        self::assertNotNull($collection);

        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }

}
