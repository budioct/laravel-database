<?php

namespace Tests\Feature;

use Database\Seeders\CategorySeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class DatabaseSeederTest extends TestCase
{
    /**
     * Database Seeding
     * ● Sebelumnya saat kita membuat unit test, kita sering melakukan insert data terlebih dahulu
     * ● Proses ini dinamakan seeding, yaitu mengubah (insert update atau delete) data di database
     * ● Laravel memiliki cara yang lebih baik untuk melakukan seeding
     *
     * Membuat Seeding
     * ● Untuk membuat seeding baru, kita bisa menggunakan perintah :
     *   php artisan make:seeder NamaSeeder
     * ● Secara otomatis akan dibuatkan file di folder database/seeders
     * ● Pada file itu, kita bisa menambahkan kode untuk memanipulasi data di database
     *
     * Menjalankan Seeder
     * ● Untuk menjalankan Seeder, kita bisa menggunakan perintah :
     * ● php artisan db:seed --class=ClassSeeder
     *
     * Memanggil Seeder dari Unit Test
     * ● Kadang kita ingin memanggil Seeder di unit test, kita bisa menggunakan method seed(class) dan
     *   diisi dengan parameter class Seeder nya
     *
     *
     * // akan membuat file seeder
     * ❯ php artisan make:seeder CategorySeeder
     * INFO  Seeder [C:\Dev\2024\Laravel\laravel-database\database\seeders\CategorySeeder.php] created successfully.
     *
     * // menjalanakn file seeder
     * ❯ php artisan db:seed --class=CategorySeeder
     * INFO  Seeding database. // artinya sudah di eksekusi
     *
     */

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::delete("delete from categories");
    }

    public function testSeeder(){

        $this->seed(CategorySeeder::class);

        $collection = DB::table("categories")->get(); // get list query dari table Category

        self::assertCount(4, $collection);

        foreach ($collection as $item) {
            self::assertNotNull($item);
            Log::info(json_encode($item));
        }

        var_dump($collection);

    }
}
